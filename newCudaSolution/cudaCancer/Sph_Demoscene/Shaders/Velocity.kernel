#version 430 core
//#extension GL_ARB_compute_shader : enable
//#extension GL_ARB_shader_storage_buffer_object : enable

layout(std430, binding = 1) buffer Pos
{
	vec4 Positions[ ];
};

layout(std430, binding = 2) buffer Vel
{
	vec4 Velocities[ ];
};

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

uniform float Time;
uniform vec3 MinBox;
uniform vec3 MaxBox;
 
const vec3 Gravity = vec3(0.0f, -9.8f, 0.0f);

vec3 Bounce(vec3 vin, vec3 n)
{
	vec3 vout = reflect(vin, n);
	return vout;
}

void main()
{
	uint gid = gl_GlobalInvocationID.x;

	vec3 gravityDelta = Time * Gravity;
	vec3 v = Velocities[gid].xyz;
	vec3 p = Positions[gid].xyz + (v + (gravityDelta / 2.0f)) * Time;
	v += gravityDelta;

	if (p.y < MinBox.y)
	{
		v = Bounce(v, vec3(0,1,0)) * 0.4f;
		p.y = MinBox.y;
	}
	else if (p.y > MaxBox.y)
	{
		v = Bounce(v, vec3(0,-1,0)) * 0.4f;
		p.y = MaxBox.y;
	}
	if (p.x > MaxBox.x)
	{
		v = Bounce(v, vec3(-1,0,0)) * 0.4f;
		p.x = MaxBox.x;
	}
	else if (p.x < MinBox.x)
	{
		v = Bounce(v, vec3(1,0,0)) * 0.4f;
		p.x = MinBox.x;
	}
	if (p.z > MaxBox.z)
	{
		v = Bounce(v, vec3(0,0,-1)) * 0.4f;
		p.z = MaxBox.z;
	}
	else if (p.z < MinBox.z)
	{
		v = Bounce(v, vec3(0,0,1)) * 0.4f;
		p.z = MinBox.z;
	}

	Positions[gid].xyz = p;
	Velocities[gid].xyz = v;
}