#version 430 core

const float PI = 3.1415926;

float Pow(float v, uint t)
{
	float res = v;
	for (uint i = 1; i < t; i++)
	{
		res *= v;
	}
	return res;
}

float DensityKernel(vec3 r, float h)
{

	return 315.0f / (64.0f * PI * Pow(h, 9)) * Pow(Pow(h, 2) - dot(r, r), 3);

}

vec3 PressureKernel(vec3 r, float h)
{
	return -945.0f / (32.0f * PI * Pow(h, 9)) * Pow(Pow(h, 2) - dot(r, r), 2) * r;

}

layout(std430, binding = 1) buffer Pos
{
	vec4 Positions[ ];
};

layout(std430, binding = 2) buffer GCnt
{
	uint GridCounter[ ];
};

layout(std430, binding = 3) buffer Gr
{
	uint Grid[ ];
};

layout(std430, binding = 4) buffer De
{
	float Density[ ];
};

layout(std430, binding = 5) buffer Pr
{
	vec4 Pressure[ ];
};

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

uniform uint CellSize;
uniform uint MaxParticlePerCell;
uniform uvec3 GridSize;
uniform vec3 MinGrid;
uniform uint ComputeDensity;
uniform float Radius;

const float Mass = 1.0f;
 
void main()
{
	uint gid = gl_GlobalInvocationID.x;
	vec3 p = Positions[gid].xyz - MinGrid;

	uvec3 cellIndexVec = uvec3(p.x / float(CellSize), p.y / float(CellSize), p.z / float(CellSize));
	if (cellIndexVec.x >= GridSize.x || cellIndexVec.y >= GridSize.y || cellIndexVec.z >= GridSize.z)
		return;
	uint counterIndex = cellIndexVec.x + cellIndexVec.y * GridSize.x + cellIndexVec.z * GridSize.x * GridSize.y;
	uint cellIndex = counterIndex * MaxParticlePerCell;
	uint particleNumber = GridCounter[counterIndex];

	if (ComputeDensity == 1) // Density
	{
		for (uint i = 0; i < particleNumber; i++)
		{
			uint p2index = Grid[cellIndex + i];

			if (p2index == gid)
			continue;

			vec3 pos1 = Positions[gid].xyz;
			vec3 pos2 = Positions[p2index].xyz;
			vec3 dist = pos1 - pos2;
			if (dot(dist, dist) <= Radius)
			{
				float kernelValue = DensityKernel(dist, Radius);
				Density[gid] += Mass * kernelValue *10000.0f;
			}
		}
	}
	else // Pressure
	{
		for (uint i = 0; i < particleNumber; i++)
		{
			uint p2index = Grid[cellIndex + i];

			if (p2index == gid)
			continue;

			vec3 pos1 = Positions[gid].xyz;
			vec3 pos2 = Positions[p2index].xyz;
			vec3 dist = pos1 - pos2;
			if (dot(dist, dist) <= Radius)
			{
				vec3 kernelValue = PressureKernel(dist, Radius);
				Pressure[gid].xyz += kernelValue * (10000000 /* Density[gid] + Density[p2index]*/);
			}
		}		
	}
}